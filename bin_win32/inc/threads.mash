// Mash lang threads unit.
// Code version: 1.0

uses <bf>

proc thread(.method, .arg):
  push .arg
  push .method
  cthr
end

proc async(.method, .arg):
  push .arg
  push .method
  cthr
  pcopy
  rthr
end

proc thr_resume(.thread):
  push .thread
  rthr
end

proc thr_suspend(.thread):
  push .thread
  sthr
end

proc thr_terminate(.thread):
  push .thread
  tthr
end

proc thr_kill(.thread):
  thr_suspend(.thread)
  thr_terminate(.thread)
end

////////////////////////////////////////////////////////////////////////////////
// Thread controller class
////////////////////////////////////////////////////////////////////////////////

class TThread:
//public
  var Resumed, Terminated, FreeOnTerminate
  proc Execute, Create, Free, Suspend, Resume, Terminate, ReJoin
//should be private
  var ThreadContext
end

proc TThread::Execute():
  // method for overriding
end

proc TThread_Join(.CurrentThreadContext, .TThreadClass):
  .TThreadClass->Execute()
  .TThreadClass->Terminated = true
  if .TThreadClass->FreeOnTerminate:
    .TThreadClass->Free()
  end
end

proc TThread::Create():
  $Resumed ?= new(false)
  $Terminated ?= new(false)
  $FreeOnTerminate ?= new(true)
  $ThreadContext ?= thread(TThread_Join, $)
  if .Resumed:
    $Resume()
  end
end

proc TThread::Free():
  Free($Suspended)
  Free($Terminated)
  Free($FreeOnTerminate)
  FreeClass$()
end

proc TThread::ReJoin(.Resumed):
  $ThreadContext ?= thread(TThread_Join, $)
  if .Resumed:
    $Resume()
  end
end

proc TThread::Suspend():
  thr_suspend($ThreadContext)
  $Resumed = false
end

proc TThread::Resume():
  thr_resume($ThreadContext)
  $Resumed = true
end

proc TThread::Terminate():
  thr_terminate($ThreadContext)
  $Terminated = true
  if $FreeOnTerminate:
    $Free()
  end
end
