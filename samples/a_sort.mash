uses <bf>
uses <crt>

/*
 *  Quick sorting algorithm.
 *  Written on Mash!
 */

proc QSort(.arr, .left, .right):
  var .i = .left, .j = .right, .tmp, .pivot = .arr[(.left + .right) \ 2]
  .tmp ?= 0

  while .i < (.j + 1):
    while .arr[.i] < .pivot:
      .i++
    end

    while .arr[.j] > .pivot:
      .j--
    end

    if .i < (.j + 1):
      .tmp = .arr[.i]
      .arr[.i] = .arr[.j]
      .arr[.j] = .tmp
      .i++
      .j--
    end
  end

  if .left < .j:
    QSort(.arr, .left, copy(.j))
  end

  if .i < .right:
    QSort(.arr, copy(.i), .right)
  end
end


/*
 *  Bubble sorting algorithm.
 *  Written on Mash!
 */

proc BSort(.array):
  var .size, .i, .j, .tmp, .flag = new
  .size ?= len(.array)
  .tmp ?= temp()
  for(var .i = 0; .i < (.size - 1); .i++):
    .flag = true
    for(.j ?= 0; .j < (.size - 1); .j++):
      if .array[.j + 1] < .array[.j]:
        .tmp = .array[.j + 1]
        .array[.j + 1] = .array[.j]
        .array[.j] = .tmp
        .flag = false
      end
    end

    if .flag:
      break
    end
  end
end


/*
 *  Print array into console.
 *  Written on Mash!
 */

proc PrintArray(.array):
  for (var .i = copy(0); .i < len(.array); inc .i):
    Print(.array[.i], " ")
  end
  PrintLn(" ")
end



proc main():
  var arr = new[100000]

  for (var i = 0; i < 100000; i++):
    arr[99999 - i] ?= copy(i)
  end

  var t1 = TickCnt()
  QSort(arr, 0, 99999)
  var t2 = TickCnt() - t1
  PrintLn("Time of sorting: " + t2 + " ms.")

  var arr2 = new[100]

  for (var i = 0; i < 100; i++):
    arr2[99 - i] ?= copy(i)
  end

  BSort(arr2)

  PrintArray(arr2)

  gc()
  InputLn()
end
