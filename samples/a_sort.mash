uses <bf>
uses <crt>

// Quick sorting algorithm.
// Written on Mash!

proc QSort(.arr, .left, .right):
  var .i = .left, .j = .right, .tmp, .pivot = .arr[(.left + .right) \ 2]
  .tmp ?= 0

  while .i <= .j:
    while .arr[.i] < .pivot:
      inc .i
    end

    while .arr[.j] > .pivot:
      dec .j
    end

    if .i <= .j:
      .tmp = .arr[.i]
      .arr[.i] = .arr[.j]
      .arr[.j] = .tmp
      inc .i
      dec .j
    end
  end

  if .left < .j:
    QSort(.arr, .left, copy(.j))
  end

  if .i < .right:
    QSort(.arr, copy(.i), .right)
  end
end


// Bubble sorting algorithm.
// Written on Mash!

proc BSort(.array):
  var .size, .i, .j, .tmp, .flag = new
  .size ?= arrlen(.array)
  .tmp ?= temp()
  for(var .i = 0; .i < (.size - 1); inc .i):
    .flag = true
    for(.j ?= 0; .j < (.size - 1); inc .j):
      if .array[.j + 1] < .array[.j]:
        .tmp = .array[.j + 1]
        .array[.j + 1] = .array[.j]
        .array[.j] = .tmp
        .flag = false
      end
    end

    if .flag:
      break
    end
  end
end


// Print array into console.
// Written on Mash!

proc PrintArray(.array):
  for (var .i = 0; .i < arrlen(.array); inc .i):
    Print(.array[.i])
    Print(" ")
  end
  PrintLn(" ")
end



proc main():
  var arr = new[10000]

  Randomize()

  for (var i = 9999; i >= 0; dec i):
    arr[9999-i] ?= new(i)
  end

  var t1 = TickCnt()
  QSort(arr, 0, 9999)
  var t2 = TickCnt() - t1
  PrintLn("Time of sorting: " + i2s(t2) + " ms.")

  var arr2 = new[100]

  for (var i = 99; i >= 0; dec i):
    arr2[99-i] ?= new(i)
  end

  BSort(arr2)
  PrintArray(arr2)

  InputLn()
end
